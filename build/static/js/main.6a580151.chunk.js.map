{"version":3,"sources":["components/Title.js","firebase/config.js","components/ProgressBar.js","hooks/useStorage.js","components/UploadForm.js","hooks/useFireStore.js","components/ImageGrid.js","components/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFireStore","timeStamp","FieldValue","serverTimestamp","ProgressBar","file","setFile","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","fileName","add","useStorage","div","initial","width","animate","UploadForm","type","onChange","e","selectedFile","target","files","includes","useFireStore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","delete","then","child","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a580151.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PicPallet</h1>\n      <h2>Seriously, upload responsibly.</h2>\n      <p>Press the \" + \" button below to upload an image. (jpeg, jpg or png)</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from \"firebase\";\nimport 'firebase/storage';\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDzXpDbO0i2N949P8R8te9YZF_IgDY9O_M\",\n    authDomain: \"picpallet.firebaseapp.com\",\n    databaseURL: \"https://picpallet.firebaseio.com\",\n    projectId: \"picpallet\",\n    storageBucket: \"picpallet.appspot.com\",\n    messagingSenderId: \"622693450790\",\n    appId: \"1:622693450790:web:297f7fc99a9789306492e7\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFireStore = firebase.firestore();\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectFireStore, projectStorage, timeStamp } ;","import React, {useEffect} from \"react\";\nimport {useStorage} from \"../hooks/useStorage\";\nimport {motion} from 'framer-motion';\n\nconst ProgressBar = ({file, setFile}) => {\n    const {url, progress} = useStorage(file);\n    useEffect(() => {\n        if(url){\n            setFile(null);\n        }\n    }, [url, setFile])\n    return (\n      <motion.div className=\"progress-bar\"\n        initial={{width:0}}\n        animate={{width: progress + '%'}}\n      >\n      </motion.div>\n    );\n}\n\nexport default ProgressBar;","import {useState, useEffect} from 'react';\nimport {projectStorage, projectFireStore, timeStamp} from \"../firebase/config\";\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFireStore.collection('images');\n\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, (err) => {\n            setError(err);\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timeStamp();\n            const fileName = file.name;\n            await collectionRef.add({fileName, url, createdAt})\n            setUrl(url);\n        })\n    }, [file])\n\n    return { progress, url, error }\n}\n\nconst deleteDoc = (selectedFile) => {\n    projectFireStore\n        .collection('images')\n        .doc(selectedFile.id)\n        .delete()\n        .then(()=> {});\n\n    projectStorage\n        .ref()\n        .child(selectedFile.fileName)\n        .delete()\n        .then(()=>{});\n}\n\nexport  { useStorage, deleteDoc };","import React, {useState} from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n\n    const [file, setFile ] = useState(null);\n    const [error, setError ] = useState(null);\n\n    const changeHandler = (e) => {\n        let selectedFile = e.target.files[0];\n        const allowedFormats = ['image/jpeg', 'image/png'];\n        if (selectedFile && allowedFormats.includes(selectedFile.type)){\n            setFile(selectedFile);\n            setError('');\n        } else {\n            setFile(null);\n            setError(\"Please select and image file. (png or jpeg)\")\n        }\n    }\n\n    return (\n        <form>\n            <label className=\"label\">\n                <input type=\"file\" onChange={changeHandler} />\n                <span>+</span>\n            </label>\n            <div className=\"output\">\n                { error && <div className=\"error\">{error}</div> }\n                { file && <div>{file.name}</div> }\n                { file && <ProgressBar file={file} setFile={setFile}/> }\n            </div>\n        </form>\n\n    );\n}\n\nexport default UploadForm;","import { useState, useEffect } from 'react';\nimport { projectFireStore} from \"../firebase/config\";\n\nconst useFireStore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFireStore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let documents = [];\n                snap.forEach(doc => {\n                    documents.push({...doc.data(), id: doc.id});\n                });\n                setDocs(documents);\n            });\n        //projectFireStore.collection returns an function that unsubscribes the collection.\n        //to clean up the grid, that function can be used.\n        return () => unsub();\n        }\n    , [collection])\n\n    return {docs};\n}\n\nexport default useFireStore;","import React from \"react\";\nimport useFireStore from \"../hooks/useFireStore\";\nimport {motion} from 'framer-motion';\n\nconst ImageGrid = ({setSelectedImg}) => {\n    const { docs } = useFireStore('images');\n    return (\n        <div className=\"img-grid\">\n            {docs && docs.map(doc => (\n                <motion.div className=\"img-wrap\"\n                     key={doc.id}\n                     layout\n                     whileHover={{opacity: 1}}\n                     onClick={() => setSelectedImg(doc)}\n                >\n                    <motion.img src={doc.url} alt=\"alter pic\"\n                        initial={{ opacity: 0}}\n                        animate={{ opacity: 1}}\n                        transition={{delay: 0.5}}\n                    />\n                </motion.div>\n            ))}\n        </div>\n    );\n}\n\nexport default ImageGrid;","import React from \"react\";\nimport {motion} from 'framer-motion';\nimport {deleteDoc} from \"../hooks/useStorage\";\n\nconst Modal = ({selectedImg, setSelectedImg}) => {\n\n    const handleClick = (e) => {\n        if(e.target.classList.contains('backdrop')){\n            setSelectedImg(null);\n        }\n    }\n    const handleDelete = (e) => {\n        deleteDoc(selectedImg);\n        setSelectedImg(null);\n    }\n\n    return (\n      <motion.div className=\"backdrop\" onClick={handleClick}\n        initial={{opacity:0}}\n        animate={{opacity:1}}\n      >\n          <motion.img src={selectedImg.url} alt=\"alternate src\"\n          initial={{y: \"-100vh\"}}\n          animate={{y: \"0vh\"}}\n          />\n          <button className=\"label\" onClick={handleDelete} >\n              <span>-</span>\n          </button>\n      </motion.div>\n    );\n}\n\nexport default Modal;","import React, {useState} from 'react';\nimport Title from './components/Title';\nimport UploadForm from \"./components/UploadForm\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport Modal from \"./components/Modal\";\n\nfunction App() {\n    const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}